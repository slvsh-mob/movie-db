{"ast":null,"code":"var _jsxFileName = \"/Users/will/Desktop/Assessment/movie_db/src/components/sidebar/sidebar.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nlet block_len = 0;\n\nconst Sidebar = props => {\n  const linkBuilder = props => {\n    if (props.input.blank === true) {\n      var output = \"<React.Fragment></React.Fragment>\";\n    } else {\n      var output = \"<React.Fragment>\";\n      const path = props.input.links;\n      console.log(path);\n      const num_links = Object.keys(path).length;\n\n      for (var i = 1; i < num_links; i++) {\n        const param = \".link\" + i;\n        const temp_link = props.input.links + param;\n        const temp_link_title = temp_link + \".title\";\n        const temp_link_link = temp_link + \".link\";\n        const temp_link_heading = temp_link + \".heading\";\n        const line1_out = \"<h1 style={test}>{\" + temp_link_title + \"}</h1>\";\n        const line2_out = \"<Link to={\" + temp_link_link + \"} style={link_style}>\" + temp_link_heading + \"</Link>\";\n        output = output + line1_out + line2_out;\n      }\n\n      output = output + \"</React.Fragment>\";\n    }\n\n    return output;\n  };\n\n  var input = linkBuilder(props);\n  input = eval(babel.transform(input).code);\n  console.log(input);\n\n  if (props.input.blank === false) {}\n\n  const block = props.input.blocks;\n\n  try {\n    block_len = Object.keys(block).length;\n  } catch (error) {\n    console.log(error);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar_div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, input);\n};\n\nconst test = {\n  color: \"white\",\n  textAlign: \"center\"\n};\nconst link_style = {\n  fontSize: \"20pt\",\n  fontWeight: \"bold\",\n  marginLeft: \"10%\"\n};\nexport default Sidebar;","map":{"version":3,"sources":["/Users/will/Desktop/Assessment/movie_db/src/components/sidebar/sidebar.js"],"names":["React","Link","block_len","Sidebar","props","linkBuilder","input","blank","output","path","links","console","log","num_links","Object","keys","length","i","param","temp_link","temp_link_title","temp_link_link","temp_link_heading","line1_out","line2_out","eval","babel","transform","code","block","blocks","error","test","color","textAlign","link_style","fontSize","fontWeight","marginLeft"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB,QAAMC,WAAW,GAAID,KAAD,IAAW;AAC3B,QAAGA,KAAK,CAACE,KAAN,CAAYC,KAAZ,KAAsB,IAAzB,EAA8B;AAC1B,UAAIC,MAAM,GAAG,mCAAb;AACH,KAFD,MAEK;AACD,UAAIA,MAAM,GAAG,kBAAb;AACA,YAAMC,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYI,KAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,YAAMI,SAAS,GAAEC,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,MAAnC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAApB,EAA+BI,CAAC,EAAhC,EAAmC;AAC/B,cAAMC,KAAK,GAAG,UAAUD,CAAxB;AACA,cAAME,SAAS,GAAGf,KAAK,CAACE,KAAN,CAAYI,KAAZ,GAAoBQ,KAAtC;AACA,cAAME,eAAe,GAAGD,SAAS,GAAG,QAApC;AACA,cAAME,cAAc,GAAGF,SAAS,GAAG,OAAnC;AACA,cAAMG,iBAAiB,GAAGH,SAAS,GAAG,UAAtC;AACA,cAAMI,SAAS,GAAG,uBAAuBH,eAAvB,GAAyC,QAA3D;AACA,cAAMI,SAAS,GAAG,eAAeH,cAAf,GAAgC,uBAAhC,GAA0DC,iBAA1D,GAA8E,SAAhG;AACAd,QAAAA,MAAM,GAAGA,MAAM,GAAGe,SAAT,GAAqBC,SAA9B;AACH;;AACDhB,MAAAA,MAAM,GAAGA,MAAM,GAAG,mBAAlB;AACH;;AACD,WAAOA,MAAP;AACH,GArBD;;AAuBA,MAAIF,KAAK,GAAGD,WAAW,CAACD,KAAD,CAAvB;AACAE,EAAAA,KAAK,GAAGmB,IAAI,CAACC,KAAK,CAACC,SAAN,CAAgBrB,KAAhB,EAAuBsB,IAAxB,CAAZ;AACAjB,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AAGA,MAAGF,KAAK,CAACE,KAAN,CAAYC,KAAZ,KAAsB,KAAzB,EAA+B,CAE9B;;AACD,QAAMsB,KAAK,GAAGzB,KAAK,CAACE,KAAN,CAAYwB,MAA1B;;AACA,MAAI;AACA5B,IAAAA,SAAS,GAAGY,MAAM,CAACC,IAAP,CAAYc,KAAZ,EAAmBb,MAA/B;AACH,GAFD,CAEE,OAAOe,KAAP,EAAc;AACZpB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKzB,KADL,CADJ;AAKH,CA7CD;;AA+CA,MAAM0B,IAAI,GAAG;AACTC,EAAAA,KAAK,EAAE,OADE;AAETC,EAAAA,SAAS,EAAE;AAFF,CAAb;AAKA,MAAMC,UAAU,GAAG;AACfC,EAAAA,QAAQ,EAAE,MADK;AAEfC,EAAAA,UAAU,EAAE,MAFG;AAGfC,EAAAA,UAAU,EAAE;AAHG,CAAnB;AAMA,eAAenC,OAAf","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nlet block_len = 0\n\nconst Sidebar = (props) => {\n\n    const linkBuilder = (props) => {\n        if(props.input.blank === true){\n            var output = \"<React.Fragment></React.Fragment>\";\n        }else{\n            var output = \"<React.Fragment>\";\n            const path = props.input.links\n            console.log(path)\n            const num_links =Object.keys(path).length\n            for (var i = 1; i < num_links; i++){\n                const param = \".link\" + i;\n                const temp_link = props.input.links + param;\n                const temp_link_title = temp_link + \".title\";\n                const temp_link_link = temp_link + \".link\";\n                const temp_link_heading = temp_link + \".heading\"\n                const line1_out = \"<h1 style={test}>{\" + temp_link_title + \"}</h1>\"\n                const line2_out = \"<Link to={\" + temp_link_link + \"} style={link_style}>\" + temp_link_heading + \"</Link>\"\n                output = output + line1_out + line2_out\n            }\n            output = output + \"</React.Fragment>\"\n        }\n        return output\n    }\n\n    var input = linkBuilder(props)\n    input = eval(babel.transform(input).code)\n    console.log(input)\n\n\n    if(props.input.blank === false){\n\n    }\n    const block = props.input.blocks\n    try {\n        block_len = Object.keys(block).length\n    } catch (error) {\n        console.log(error)\n    }\n\n    return(\n        <div className=\"sidebar_div\">\n            {input}\n        </div>\n    );\n}\n\nconst test = {\n    color: \"white\",\n    textAlign: \"center\"\n}\n\nconst link_style = {\n    fontSize: \"20pt\",\n    fontWeight: \"bold\",\n    marginLeft: \"10%\"\n}\n\nexport default Sidebar"]},"metadata":{},"sourceType":"module"}